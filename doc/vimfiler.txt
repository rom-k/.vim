*vimfiler.txt*	Powerful file explorer implemented by Vim script

Version: 3.2
Author : Shougo <Shougo.Matsu@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*vimfiler-contents*

Introduction		|vimfiler-introduction|
Interface		|vimfiler-interface|
  Commands		  |vimfiler-commands|
  Functions		  |vimfiler-functions|
  Variables		  |vimfiler-variables|
    Sources variables	    |vimfiler-sources-variables|
  Key mappings		  |vimfiler-key-mappings|
Examples		|vimfiler-examples|
Unite sources		|vimfiler-unite-sources|
FAQ			|vimfiler-faq|
Changelog		|vimfiler-changelog|

==============================================================================
INTRODUCTION					*vimfiler-introduction*

*vimfiler* is a powerful file explorer(filer) written by Vim script.

==============================================================================
USAGE						*vimfiler-usage*

	To run vimfiler, execute this command.
>
	:VimFiler
<
	If you set |g:vimfiler_as_default_explorer| to 1, vimfiler behaves
	as default explorer like |netrw|.
>
	:let g:vimfiler_as_default_explorer = 1
<
vimfiler needs |unite|
http://github.com/Shougo/unite.vim

Please install unite.vim Ver.3.0(or later) before use vimfiler.

Note: To use 4GB(>) files in vimfiler, vimfiler require |+python| interface.

==============================================================================
INTERFACE					*vimfiler-interface*

------------------------------------------------------------------------------
COMMANDS 					*vimfiler-commands*

:VimFiler [{options}...] [[{source-name}:]{path}]
						*:VimFiler*
		Run vimfiler. This command reuses a buffer if a vimfiler
		buffer already exists. If you ommit {path}, vimfiler opens current
		directory. [[{source-name}:]{path}] arg is same as |:Unite|.
		But you ommit source name, "file" source will be used.
		If {path} is directory, browse in {path} directory files.
		If {path} is file, edit {path} file.

		Examples:
		"foo": the parameters of source file are
		                ["foo"].
		"ssh:bar:baz": the parameters of source ssh are
		                ["bar", "baz"].
>
		" File explorer like behavior.
		:VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit
		:VimFilerExplorer
<
						*vimfiler-options*
		{options} are options for a vimfiler buffer.  You may give the
		following parameters for a option; you must escape with \ when
		it contains spaces.

						*vimfiler-options-buffer-name*
		-buffer-name={buffer-name}
		Specifies a buffer name.
		The default buffer name is 'default'.
		Note: Buffer name must not contain spaces.

						*vimfiler-options-no-quit*
		-no-quit
		Doesn't close the vimfiler buffer after firing an action.

						*vimfiler-options-quit*
		-quit
		Close the vimfiler buffer after firing an action.

						*vimfiler-options-winwidth*
		-winwidth={window-width}
		Specifies the width of a vimfiler buffer.

						*vimfiler-options-winminwidth*
		-winminwidth={window-width}
		Specifies the minimum width of a vimfiler buffer.

						*vimfiler-options-winheight*
		-winheight={window-height}
		Specifies the height of a vimfiler buffer.

						*vimfiler-options-direction*
		-direction={direction}
		Defines split position rule. The default value is same to
		|g:vimfiler_split_rule|.

						*unite-options-toggle*
		-toggle
		Close vimfiler buffer window if this vimfiler buffer name
		window is exists.

						*unite-options-simple*
		-simple
		Enable vimfiler simple mode.

						*unite-options-split*
		-split
		Split vimfiler buffer.

						*unite-options-horizontal*
		-horizontal
		Split horizontally.

						*unite-options-double*
		-double
		Open vimfiler buffers in double mode.

						*vimfiler-options-create*
		-create
		Create new vimfiler buffer.

						*unite-options-auto-cd*
		-auto-cd
		Enable auto cd behavior.
		If omit it, use |g:vimfiler_enable_auto_cd|.
		Note: This option works in file source.

						*unite-options-explorer*
		-explorer
		Enable the behavior like explorer.
		Note: This option changes some default options.
		For Example, hide parent directory, change some default
		mappings ...

						*vimfiler-options-reverse*
		-reverse
		Reverse open another vimfiler window.
		If "-horizontal" option is enabled, will open another vimfiler
		vertically.  If "-horizontal" option is disabled, will open
		another vimfiler horizontally.

:VimFilerCreate [{options}...] [{path}]		*:VimFilerCreate*
		Equivalent to |:VimFiler| except that it creates a new vimfiler
		buffer.

:VimFilerSimple [{options}...] [{path}]		*:VimFilerSimple*
		Equivalent to |:VimFiler| except that it creates a simple vimfiler
		buffer.

:VimFilerSplit [{options}...] [{path}]		*:VimFilerSplit*
		Equivalent to |:VimFiler| except that it creates a vimfiler buffer
		and split the window.

:VimFilerTab [{options}...] [{path}]		*:VimFilerTab*
		Equivalent to |:VimFiler| except that it creates a vimfiler buffer
		and create a tab.

:VimFilerDouble [{options}...] [{path}]		*:VimFilerDouble*
		Equivalent to |:VimFiler| except that it creates double vimfiler
		buffers.

:VimFilerCurrentDir [{options}...] [{path}]	*:VimFilerCurrentDir*
		Equivalent to |:VimFiler| except that it starts with current
		directory.

:VimFilerBufferDir [{options}...] [{path}]	*:VimFilerBufferDir*
		Equivalent to |:VimFiler| except that it starts with current
		buffer directory.

:VimFilerExplorer [{options}...] [{path}]	*:VimFilerExplorer*
		Equivalent to |:VimFiler| except that it creates explorer
		vimfiler buffers.

:VimFilerClose {buffer-name}			*:VimFilerClose*
		Close vimfiler buffer named {buffer-name}.

------------------------------------------------------------------------------
FUNCTIONS					*vimfiler-functions*

vimfiler#do_action({action-name})		*vimfiler#do_action()*
		Execute {action-name} action for the marked candidates.
		This causes a runtime error if {action-name} doesn't exist or
		the action is invalid.

		This is handy for defining a key mapping to run an action by
		yourself.

		This runs the default action when you specify "default" on
		{action-name}.

		This runs an action on the candidates of the current line or
		the top of the candidates when none of the candidates are marked.

		This is usually used as nnoremap <silent><buffer><expr>.
		For example,
>
		nnoremap <silent><buffer><expr> v vimfiler#do_action('vsplit')
>
vimfiler#smart_cursor_map({directory-map}, {file-map})
						*vimfiler#smart_cursor_map()*
		Returns the key sequence with respect to the given
		directory-map and file-map.  This will be used with
		nmap <buffer><expr> usually.
		Example:
>
		nmap <buffer><expr> e vimfiler#smart_cursor_map(
				\  "\<Plug>(vimfiler_cd_file)",
				\  "\<Plug>(vimfiler_edit_file)")

vimfiler#set_execute_file({exts}, {command})	*vimfiler#set_execute_file()*

------------------------------------------------------------------------------
VARIABLES 					*vimfiler-variables*

g:vimfiler_as_default_explorer		*g:vimfiler_as_default_explorer*
		If this variable is true, Vim use vimfiler as file manager
		instead of |netrw|. Note: This variable disables |netrw|
		explorer function.
		
		Default value is 0.

g:vimfiler_execute_file_list			*g:vimfiler_execute_file_list*
		This variable controls vimfiler execute.
		The key is extension. The value is command name or
		command name list. If value is "vim", edit file.
		If the key is "_", it will be default command name.

g:vimfiler_extensions				*g:vimfiler_extensions*
		This variable controls vimfiler color syntax.
		The key is "text", "image", "archive", "system", "multimedia".
		The value is extensions.

		Default value is complicated, please refer to
		autoload/vimfiler.vim.

g:vimfiler_split_action				*g:vimfiler_split_action*
		This variable controls vimfiler split action in |unite|.
		
		Default value is "right".

g:vimfiler_edit_action				*g:vimfiler_edit_action*
		This variable controls vimfiler edit action in |unite|.
		
		Default value is "open".

g:vimfiler_preview_action			*g:vimfiler_preview_action*
		This variable controls vimfiler preview action in |unite|.
		
		Default value is "preview".

g:vimfiler_min_filename_width			*g:vimfiler_min_filename_width*
		This variable controls vimfiler displays min filename width.
		If filename range is shorter than it, vimfiler force use simple
		interface.
		
		Default value is 30.

g:vimfiler_max_filename_width		*g:vimfiler_max_filename_width*
		This variable controls vimfiler displays max filename width.
		
		Default value is 120.

g:vimfiler_sort_type				*g:vimfiler_sort_type*
		This variable controls default vimfiler sort type.
		
		Default value is "filename".

g:vimfiler_directory_display_top	*g:vimfiler_directory_display_top*
		This variable controls vimfiler sorts directories as top.
		
		Default value is 1.

g:vimfiler_split_rule				*g:vimfiler_split_rule*
		Defines split position rule.

		Default value is "topleft".

g:vimfiler_detect_drives			*g:vimfiler_detect_drives*
		This variable controls vimfiler uses drives
		 when |<Plug>(vimfiler_switch_to_drive)|.
		
		Default value is refer to plugin/vimfiler.vim.

g:vimfiler_safe_mode_by_default		*g:vimfiler_safe_mode_by_default*
		This variable controls vimfiler enter safe mode by default. In
		safe mode, dangerous command is disabled.
		
		Default value is 1.

g:vimfiler_time_format				*g:vimfiler_time_format*
		This variable controls displayed time format.
		The time format option is compatible |strftime()|.
		
		Default value is "%y/%m/%d %H:%M".

g:vimfiler_max_directories_history	*g:vimfiler_max_directories_history*
		This variable controls max directories history.
		
		Default value is 50.

g:vimfiler_tree_leaf_icon			*g:vimfiler_tree_leaf_icon*
		This variable controls vimfiler tree leaf icon.
		
		Default value is "|"

g:vimfiler_tree_opened_icon			*g:vimfiler_tree_opened_icon*
		This variable controls vimfiler opened directory tree icon.
		
		Default value is "-"

g:vimfiler_tree_closed_icon			*g:vimfiler_tree_closed_icon*
		This variable controls vimfiler closed directory tree icon.
		
		Default value is "+"

g:vimfiler_readonly_file_icon		*g:vimfiler_readonly_file_icon*
		This variable controls vimfiler readonly file icon.
		
		Default value is "X"

g:vimfiler_file_icon			*g:vimfiler_file_icon*
		This variable controls vimfiler file icon.
		
		Default value is "-"

g:vimfiler_marked_file_icon		*g:vimfiler_marked_file_icon*
		This variable controls vimfiler marked file icon.
		
		Default value is "*"

g:vimfiler_data_directory			*g:vimfiler_data_directory*
		Specifies directories for configurations internally used in
		vimfiler itself or its sources.  If the directory doesn't
		exist the directory will be automatically generated.
		
		Default value is expand('~/.vimfiler'); the absolute path of
		it.

g:vimfiler_enable_auto_cd			*g:vimfiler_enable_auto_cd*
		This variable controls whether vimfiler change Vim current
		directory using |g:unite_kind_openable_lcd_command|
		automatically.
		Note: This variable works in file source.
		
		Default value is 0

g:vimfiler_no_default_key_mappings	*g:vimfiler_no_default_key_mappings*
		If it is non-zero, will disable vimfiler default
		keymappings(|vimfiler-default-key-mappings|).

		This variable is undefined in default.

SOURCES VARIABLES 				*vimfiler-sources-variables*

g:unite_kind_file_delete_file_command
				*g:unite_kind_file_delete_file_command*
g:unite_kind_file_delete_directory_command
				*g:unite_kind_file_delete_directory_command*
		This variable controls vimfiler (and kind file) use delete
		command.
		
		This variable substitute special arguments:
		$srcs : src files
		$dest : destination directory
		
		Default value is refer to autoload/unite/kinds/file.vim.

g:unite_kind_file_copy_file_command
				*g:unite_kind_file_copy_file_command*
		This variable controls vimfiler (and kind file) use copy
		files command.
		If variable is empty, this system can't support copy file.
		
		This variable substitute special arguments:
		$srcs : src files
		$dest : destination directory
		
		Default value is refer to autoload/unite/kinds/file.vim.

g:unite_kind_file_copy_directory_command
				*g:unite_kind_file_copy_directory_command*
		This variable controls vimfiler (and kind file) use copy
		directories command.
		If variable is empty, this system can't support copy
		directories.
		
		This variable substitute special arguments:
		$srcs : src files
		$dest : destination directory
		
		Default value is refer to autoload/unite/kinds/file.vim.

g:unite_kind_file_switch_command
				*g:unite_kind_file_switch_command*
		This variable controls vimfiler (and kind file) use switch
		files command.
		
		This variable substitute special arguments:
		$srcs : src files
		$dest : destination directory
		
		Default value is refer to autoload/unite/kinds/file.vim.

g:unite_kind_file_use_trashbox
				*g:unite_kind_file_use_trashbox*
		This variable controls vimfiler (and kind file) use trashbox
		when delete files. It is automatically set if you installed
		|vimproc|.
		Note: This option is works newest |vimproc| and in Windows
		only.

------------------------------------------------------------------------------
KEY MAPPINGS 					*vimfiler-key-mappings*

Normal mode key mappings.

<Plug>(vimfiler_switch_to_other_window)
				*<Plug>(vimfiler_switch_to_other_window)*
		Switches to other window or creates another vimfiler window.

<Plug>(vimfiler_switch_to_another_vimfiler)
				*<Plug>(vimfiler_switch_to_another_vimfiler)*
		Switches to another vimfiler window or creates another
		vimfiler window.

<Plug>(vimfiler_loop_cursor_down)	*<Plug>(vimfiler_loop_cursor_down)*
		Switches to next line with loop.

<Plug>(vimfiler_loop_cursor_up)		*<Plug>(vimfiler_loop_cursor_up)*
		Switches to previous line with loop.

<Plug>(vimfiler_cursor_top)		*<Plug>(vimfiler_cursor_top)*
		Moves the cursor to the top of the vimfiler.

<Plug>(vimfiler_redraw_screen)		*<Plug>(vimfiler_redraw_screen)*
		Redraws vimfiler screen.

<Plug>(vimfiler_toggle_mark_current_line)
				*<Plug>(vimfiler_toggle_mark_current_line)*
		Toggles mark in cursor line and move down.

<Plug>(vimfiler_toggle_mark_current_line_up)
				*<Plug>(vimfiler_toggle_mark_current_line_up)*
		Toggles mark in cursor line and move up.

<Plug>(vimfiler_toggle_mark_all_lines)
				*<Plug>(vimfiler_toggle_mark_all_lines)*
		Toggles marks in all lines.

<Plug>(vimfiler_clear_mark_all_lines)
				*<Plug>(vimfiler_clear_mark_all_lines)*
		Clears marks in all lines.

<Plug>(vimfiler_copy_file)			*<Plug>(vimfiler_copy_file)*
		Copies marked files to destination directory. If exists
		another vimfiler buffer, destination directory is another
		vimfiler directory.
		If no marked files, mark current file.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_move_file)			*<Plug>(vimfiler_move_file)*
		Moves marked files to destination directory. If exists another
		vimfiler buffer, destination directory is another vimfiler
		directory.
		If no marked files, mark current file.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_delete_file)			*<Plug>(vimfiler_delete_file)*
		Deletes marked files completely.
		If no marked files, mark current file.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_clipboard_copy_file)
					*<Plug>(vimfiler_clipboard_copy_file)*
		Copies marked files to vimfiler clipboard.
		If no marked files, mark current file.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_clipboard_move_file)
					*<Plug>(vimfiler_clipboard_move_file)*
		Moves marked files to vimfiler clipboard.
		If no marked files, mark current file.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_clipboard_paste)
					*<Plug>(vimfiler_clipboard_paste)*
		Execute move or copy operation from vimfiler clipboard to
		cursor directory. If directory tree is opened, will execute
		the operation in directory tree.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_make_directory)		*<Plug>(vimfiler_make_directory)*
		Creates new directory. If directory tree is opened, will
		create new directory in directory tree.
		If you marked files, will move the files in new directory.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_new_file)			*<Plug>(vimfiler_new_file)*
		Creates new files. If directory tree is opened, create new
		files in directory tree.
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_rename_file)			*<Plug>(vimfiler_rename_file)*
		Renames cursor file or selected files.
		If selected files, vimfiler will open exrename buffer.
		In exrename buffer, you can rename with Vim features like
		|renamer.vim|.
		http://www.vim.org/scripts/script.php?script_id=1721
		Note: This mappings is disabled in vimfiler safe mode.

<Plug>(vimfiler_execute)			*<Plug>(vimfiler_execute)*
		Executes cursor file with |g:vimfiler_execute_file_list|
		command.  If cursor file is directory, change directory.

<Plug>(vimfiler_execute_system_associated)
				*<Plug>(vimfiler_execute_system_associated)*
<Plug>(vimfiler_execute_file)		*<Plug>(vimfiler_execute_file)*
		Executes marked files or cursor file by system associated
		command.
		Note: <Plug>(vimfiler_execute_file) is obsolute name.

<Plug>(vimfiler_execute_vimfiler_associated)
				*<Plug>(vimfiler_execute_vimfiler_associated)*
		Executes cursor file by vimfiler associated command.
		Refer to |g:vimfiler_execute_file_list|.

<Plug>(vimfiler_switch_to_parent_directory)
				*<Plug>(vimfiler_switch_to_parent_directory)*
		Switches to parent directory.

<Plug>(vimfiler_switch_to_drive)	*<Plug>(vimfiler_switch_to_drive)*
		Switches to other drive(Windows) or mount point(Mac/Linux) by
		|unite| interface.

<Plug>(vimfiler_switch_to_home_directory)
				*<Plug>(vimfiler_switch_to_home_directory)*
		Switches to home directory.

<Plug>(vimfiler_switch_to_root_directory)
				*<Plug>(vimfiler_switch_to_root_directory)*
		Switches to root directory.

<Plug>(vimfiler_switch_to_history_directory)
				*<Plug>(vimfiler_switch_to_history_directory)*
		Switches to history directory by |unite| interface.

<Plug>(vimfiler_toggle_visible_dot_files)
				*<Plug>(vimfiler_toggle_visible_dot_files)*
		Toggles visible dot files.

<Plug>(vimfiler_popup_shell)			*<Plug>(vimfiler_popup_shell)*
		Executes |:VimShellPop|or |:shell|.

<Plug>(vimfiler_edit_file)			*<Plug>(vimfiler_edit_file)*
		Edits cursor file. This mapping use |g:vimfiler_edit_action|.

<Plug>(vimfiler_split_edit_file)	*<Plug>(vimfiler_split_edit_file)*
		Splits buffer and edit cursor file. This mapping use
		|g:vimfiler_edit_action|.

<Plug>(vimfiler_edit_binary_file)	*<Plug>(vimfiler_edit_binary_file)*
		Edits binary file by |vinarise|.

<Plug>(vimfiler_execute_external_filer)
				*<Plug>(vimfiler_execute_external_filer)*
		Opens current directory by external filer(Explorer, Nautilus,
		...).

<Plug>(vimfiler_execute_shell_command)
				*<Plug>(vimfiler_execute_shell_command)*
		Executes shell command by |vimproc#system()| or |system()|.
		If the argument is "?", it substitutes one file.
		If the argument is "*", it substitutes the selected files.
		Otherwise, it appends one file to the last argument.
		
		Example:
		You selected files "foo", "bar", "baz".
		(Input)   "echo"
		(Command) "echo foo; echo bar; echo baz"
		
		(Input)   "echo ? hoge"
		(Command) "echo foo hoge; echo bar hoge; echo baz hoge"
		
		(Input) "echo *"
		(Command) "echo foo bar baz"

<Plug>(vimfiler_hide)				*<Plug>(vimfiler_hide)*
		Hides current and another vimfiler windows.

<Plug>(vimfiler_exit)				*<Plug>(vimfiler_exit)*
		Exits current and another vimfiler buffers.

<Plug>(vimfiler_close)				*<Plug>(vimfiler_close)*
		Closes current vimfiler window.

<Plug>(vimfiler_help)				*<Plug>(vimfiler_help)*
		Starts mappings help by |unite| interface.

<Plug>(vimfiler_preview_file)		*<Plug>(vimfiler_preview_file)*
		Previews current file. This mapping use
		|g:vimfiler_preview_action|.

<Plug>(vimfiler_sync_with_current_vimfiler)
				*<Plug>(vimfiler_sync_with_current_vimfiler)*
		Synchronizes another vimfiler current directory with current
		vimfiler.

<Plug>(vimfiler_sync_with_another_vimfiler)
				*<Plug>(vimfiler_sync_with_another_vimfiler)*
		Synchronizes current directory with another vimfiler.

<Plug>(vimfiler_open_file_in_another_vimfiler)
			*<Plug>(vimfiler_open_file_in_another_vimfiler)*
		Opens cursor file or marked files in another vimfile. If the
		file is directory, will change directory in another vimfiler.

<Plug>(vimfiler_print_filename)		*<Plug>(vimfiler_print_filename)*
		Prints whole filename in echo area.

<Plug>(vimfiler_toggle_maximize_window)
				*<Plug>(vimfiler_toggle_maximize_window)*
		Toggles maximize window in current vimfiler.

<Plug>(vimfiler_yank_full_path)		*<Plug>(vimfiler_yank_full_path)*
		Yanks full path to clipboard register and unnamed register.

<Plug>(vimfiler_set_current_mask)	*<Plug>(vimfiler_set_current_mask)*
		Set current file mask by |unite| interface.

<Plug>(vimfiler_grep)				*<Plug>(vimfiler_grep)*
		Executes grep word in selected files or all current files by
		|unite| interface.
		Note: This mapping use |vimproc|.

<Plug>(vimfiler_find)				*<Plug>(vimfiler_find)*
		Finds from current directory by |unite| interface. Command
		line format is refer to find command.
		Note: Windows "find" command is not supported.
		Please install UNIX Tools find for Windows.
		Note: This mapping use |vimproc|.

<Plug>(vimfiler_select_sort_type)	*<Plug>(vimfiler_select_sort_type)*
		Selects current vimfiler sort type by |unite| interface.
		If you selected "save", save current sort type.
		If you selected "nosave", no save current sort type.

<Plug>(vimfiler_switch_vim_buffer_mode)
				*<Plug>(vimfiler_switch_vim_buffer_mode)*
		Switches to vimfiler buffer mode. All vimfiler mappings is
		disabled. If press <ESC>, settings will be restored.

<Plug>(vimfiler_cd_vim_current_dir)	*<Plug>(vimfiler_cd_vim_current_dir)*
<Plug>(vimfiler_cd)				*<Plug>(vimfiler_cd)*
		Changes system current directory to vimfiler current directory
		using |g:unite_kind_openable_lcd_command|.
		Note: |<Plug>(vimfiler_cd)| is obsolute name.

<Plug>(vimfiler_cd_file)			*<Plug>(vimfiler_cd_file)*
		Changes vimfiler current directory.

<Plug>(vimfiler_choose_action)		*<Plug>(vimfiler_choose_action)*
		Chooses |unite| action in selected files.

<Plug>(vimfiler_smart_h)			*<Plug>(vimfiler_smart_h)*
		Switches to parent directory or normal! "h".
		If enabled "explorer" option, it unexpand directory tree or
		normal! "h".

<Plug>(vimfiler_smart_l)			*<Plug>(vimfiler_smart_l)*
		Executes cursor file or normal! "l".
		If enabled "explorer" option, it expand directory tree or
		normal! "l".

<Plug>(vimfiler_toggle_safe_mode)	*<Plug>(vimfiler_toggle_safe_mode)*
		Toggles safe mode. In safe mode, dangerous command is
		disabled.

<Plug>(vimfiler_toggle_simple_mode)	*<Plug>(vimfiler_toggle_simple_mode)*
		Toggles simple mode. In simple mode, dispayed information is
		simple.

<Plug>(vimfiler_pushd)				*<Plug>(vimfiler_pushd)*
		Pushes current directory(and another vimfiler current
		directory) to directory stack.

<Plug>(vimfiler_popd)				*<Plug>(vimfiler_popd)*
		Pops current directory(and another vimfiler current directory)
		from directory stack.

<Plug>(vimfiler_expand_tree)			*<Plug>(vimfiler_expand_tree)*
		Expands/Unexpands directory tree. If it is used on file, it
		will expand/unexpand parent directory tree.

<Plug>(vimfiler_expand_tree_recursive)
				*<Plug>(vimfiler_expand_tree_recursive)*
		Expands/Closes directory tree.
		Note: This mapping ignores a symbolic link.

<Plug>(vimfiler_cd_input_directory)
					*<Plug>(vimfiler_cd_input_directory)*
		Changes directory to input directory.

<Plug>(vimfiler_double_click)		*<Plug>(vimfiler_double_click)*
		If cursor is on the directory, execute
		|<Plug>(vimfiler_expand_tree)| mapping.
		If cursor is on the file, execute
		|<Plug>(vimfiler_execute_system_associated)| mapping.

Visual mode key mappings.

<Plug>(vimfiler_toggle_mark_selected_lines)
				*<Plug>(vimfiler_toggle_selected_lines)*
		Toggles marks in selected lines.

					*vimfiler-default-key-mappings*
Following keymappings are default keymappings.

Normal mode default mappings.
{lhs}			{rhs}
--------		-----------------------------
<Tab> (default)
			<Plug>(vimfiler_switch_to_another_vimfiler)
<Tab> (enabled "no-quit" and "split" options)
			<Plug>(vimfiler_switch_to_other_window)
j			<Plug>(vimfiler_loop_cursor_down)
k			<Plug>(vimfiler_loop_cursor_up)
gg			<Plug>(vimfiler_cursor_top)
<C-l>			<Plug>(vimfiler_redraw_screen)
<Space>			<Plug>(vimfiler_toggle_mark_current_line)
<S-Space>		<Plug>(vimfiler_toggle_mark_current_line_up)
*			<Plug>(vimfiler_toggle_mark_all_lines)
U			<Plug>(vimfiler_clear_mark_all_lines)
c			<Plug>(vimfiler_copy_file)
m			<Plug>(vimfiler_move_file)
d			<Plug>(vimfiler_delete_file)
Cc			<Plug>(vimfiler_clipboard_copy_file)
Cm			<Plug>(vimfiler_clipboard_move_file)
Cp			<Plug>(vimfiler_clipboard_paste)
r			<Plug>(vimfiler_rename_file)
K			<Plug>(vimfiler_make_directory)
N			<Plug>(vimfiler_new_file)
<Enter>			<Plug>(vimfiler_execute)
l			<Plug>(vimfiler_smart_l)
x			<Plug>(vimfiler_execute_system_associated)
h			<Plug>(vimfiler_smart_h)
L			<Plug>(vimfiler_switch_to_drive)
~			<Plug>(vimfiler_switch_to_home_directory)
\			<Plug>(vimfiler_switch_to_root_directory)
<C-j>			<Plug>(vimfiler_switch_to_history_directory)
<BS>			<Plug>(vimfiler_switch_to_parent_directory)
.			<Plug>(vimfiler_toggle_visible_dot_files)
H			<Plug>(vimfiler_popup_shell)
e			<Plug>(vimfiler_edit_file)
E			<Plug>(vimfiler_split_edit_file)
B			<Plug>(vimfiler_edit_binary_file)
ge			<Plug>(vimfiler_execute_external_filer)
<RightMouse>		<Plug>(vimfiler_execute_external_filer)
!			<Plug>(vimfiler_execute_shell_command)
q			<Plug>(vimfiler_hide)
Q			<Plug>(vimfiler_exit)
-			<Plug>(vimfiler_close)
?			<Plug>(vimfiler_help)
v			<Plug>(vimfiler_preview_file)
o			<Plug>(vimfiler_sync_with_current_vimfiler)
O			<Plug>(vimfiler_open_file_in_another_vimfiler)
<C-g>			<Plug>(vimfiler_print_filename)
g<C-g>			<Plug>(vimfiler_toggle_maximize_window)
yy			<Plug>(vimfiler_yank_full_path)
M			<Plug>(vimfiler_set_current_mask)
gr			<Plug>(vimfiler_grep)
gf			<Plug>(vimfiler_find)
S			<Plug>(vimfiler_select_sort_type)
<C-v>			<Plug>(vimfiler_switch_vim_buffer_mode)
gc			<Plug>(vimfiler_cd_vim_current_dir)
gs			<Plug>(vimfiler_toggle_safe_mode)
gS			<Plug>(vimfiler_toggle_simple_mode)
a			<Plug>(vimfiler_choose_action)
Y			<Plug>(vimfiler_pushd)
P			<Plug>(vimfiler_popd)
t			<Plug>(vimfiler_expand_tree)
T			<Plug>(vimfiler_expand_tree_recursive)
I			<Plug>(vimfiler_cd_input_directory)
<2-LeftMouse>		<Plug>(vimfiler_double_click)

Visual mode mappings.
{lhs}			{rhs}
--------		-----------------------------
<Space>			<Plug>(vimfiler_toggle_mark_selected_lines)

==============================================================================
EXAMPLES					*vimfiler-examples*
>
	call vimfiler#set_execute_file('vim', 'vim')
	call vimfiler#set_execute_file('txt', 'notepad')
	call vimfiler#set_execute_file('c', ['vim', 'notepad'])
	
	" Edit file by tabedit.
	"let g:vimfiler_edit_action = 'tabopen'
	
	let g:vimfiler_as_default_explorer = 1
	
	" Enable file operation commands.
	"let g:vimfiler_safe_mode_by_default = 0
	
	" Like Textmate icons.
	let g:vimfiler_tree_leaf_icon = ' '
	let g:vimfiler_tree_opened_icon = '▾'
	let g:vimfiler_tree_closed_icon = '▸'
	let g:vimfiler_file_icon = '-'
	let g:vimfiler_marked_file_icon = '*'

	" Use trashbox.
	" Windows only and require latest vimproc.
	"let g:unite_kind_file_use_trashbox = 1
<
==============================================================================
UNITE SOURCES					*vimfiler-unite-sources*

Here let me explain about a source for |unite| provided in vimfiler.

						*vimfiler-unite-source-vimfiler-history*
vimfiler/history
		Candidates of vimfiler history.

						*vimfiler-unite-source-vimfiler-drive*
vimfiler/drive
		Candidates of vimfiler drives.

						*vimfiler-unite-source-vimfiler-sort*
vimfiler/sort
		Candidates of vimfiler sort method.

						*vimfiler-unite-source-vimfiler-mask*
vimfiler/mask
		Change current vimfiler file mask.

						*vimfiler-unite-source-vimfiler-mapping*
vimfiler/mapping
		Candidates of vimfiler mappings.

						*vimfiler-unite-source-vimfiler-execute*
vimfiler/execute
		Candidates from |g:vimfiler_execute_file_list|.

						*vimfiler-unite-source-vimfiler-popd*
vimfiler/popd
		Candidates from vimfiler directory stack.

Actions of source original.

vimfiler/history				*vimfiler-unite-action-vimfiler-history*
	delete		Delete history

vimfiler/sort					*vimfiler-unite-action-vimfiler-sort*
	sort		Set sort type

vimfiler/mask					*vimfiler-unite-action-vimfiler-mask*
	change		Change vimfiler mask

vimfiler/popd					*vimfiler-unite-action-vimfiler-popd*
	delete		Delete directory from directory stack

==============================================================================
FAQ						*vimfiler-faq*

Like NERDTree FAQ(https://github.com/scrooloose/nerdtree).

Q: To open a vimfiler tree automatically when Vim starts up(VimEnter autocmd
event)?
>
	autocmd VimEnter * VimFilerExplorer
<
Q: To open a vimfiler buffer automatically when Vim starts up if no
files(arguments) were specified
>
	autocmd VimEnter * if !argc() | VimFiler | endif
<
Q: To close Vim if the only window left open is a vimfiler buffer(But I don't
recommend)
>
	autocmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
<
Q: I want to use UNC path in vimfiler.
A: You must use // path to open UNC path in Windows:
Note: "\\" path is not supported.
>
	VimFiler //{path}/
	VimFiler //foo/bar/
	VimFiler //hoge/piyo/hogera.txt

Q: I want to close one vimfile window in double mode.
A: <Plug>(vimfiler_hide) closes both vimfiler windows. You can use
<Plug>(vimfiler_close) instead of it:
>
	autocmd FileType vimfiler nnoremap q <buffer> <Plug>(vimfiler_close)
<

Q: I want to put trashbox instead of "rm" command.
A: Yes, you can. Newest unite.vim and vimfiler are detect trashbox commands
automatically.

In windows: Please install vimproc.
http://github.com/Shougo/vimproc

In Mac: Please install "rmtrash" command.
>
	$ brew install rmtrash
<
Or
>
	$ sudo port install rmtrash
<
In Linux: Please install "trashcli" commands.
https://github.com/andreafrancia/trash-cli
>
	$ sudo apt-get install trash-cli
<

==============================================================================
CHANGELOG					*vimfiler-changelog*

2012-12-17
- Improved get filetime.

2012-12-13
- Fixed vimfiler explorer behavior.

2012-12-07
- Set nobuflisted in explorer.

2012-12-02
- Fixed explorer behavior.

2012-10-27
- Improved documentation.
- Improved sort orders.

2012-10-22
- Improved write handler.

2012-10-19
- Improved start unite behavior.
- Improved <Plug>(vimfiler_make_directory).

2012-10-09
- Fixed function name.

2012-09-25
- Improved <Plug>(vimfiler_execute_system_associated) behavior.

2012-09-20
- Fixed autocmd behavior.
- Fixed acwrite error.

2012-09-19
- Improved g:vimfiler_execute_file_list behavior.
- Improved check network drives.
- Added <BS> default mapping.
- Added s:on_FileReadCmd().
- Improved BufWriteCmd.

2012-09-13
- Added FAQ section.
- Improved vimfiler/drive source.
- Improved cd behavior.

2012-09-11
- Added <Plug>(vimfiler_double_click) mapping.
- Added clipboard operations.

2012-09-10
- Hide parent directory in explorer mode.

2012-09-09
- Added -reverse option.

2012-09-06
- Fixed exrename relative path.

2012-09-05
- Fixed sync_with_another_vimfiler.
- Added <Plug>(vimfiler_close) mapping.

2012-09-04
- Fixed initialization.

2012-09-03
- Fixed marks.
- Check in expand/unexpand tree.
- Added vimproc check.

2012-09-02
- Fixed open vimfiler buffers.
- Fixed to sync another vimfiler.

2012-09-01
- Fixed toggle.
- Improved switch behavior.
- Improved simple behavior.
- Added :VimFilerExplorer command.
- Improved expand/unexpand tree mappings.
- Improved to search vimfiler buffer.

2012-08-31
- Added window restore.
- Fixed switch problem.
- Improved move cursor behavior.

2012-08-30
- Improved rename copy behavior.

2012-08-29
- Fixed hide and exit.
- Improved for :VimFilerDouble.
- Added <Plug>(vimfiler_switch_to_another_vimfiler) keymapping.
- Changed <Tab> default keymapping.

2012-08-28
- Fixed vimfiler#redraw_prompt().
- Improved double vimfiler behavior.
- Refactored documentation.
- Fixed another_vimfiler_bufnr.

2012-08-24
- Added -winheight option.

2012-08-22
- Added depends.

2012-08-21
- Updated vital.

2012-08-17
- Fixed for vimfiler__writable.

2012-08-15
- Improved postfix.
- Improved loaded check.

2012-08-14
- Ver.3.2 development is started.

------------------------------------------------------------------------------
ChangeLog 3.1

2012-08-14
- Fixed <Plug>(vimfiler_expand_tree_recursive) behavior.

2012-08-12
- Fixed postfix problem.
- Added g:vimfiler_readonly_file_icon option.

2012-08-10
- Improved last vimfiler buffer.

2012-08-09
- Fixed current directory highlight.

2012-08-08
- Setlocal noswapfile.
- Fixed for vital buffer manager.

2012-08-07
- Updated vital.
- Set noswapfile.
- Don't use vital buffer manager(temporary).

2012-08-01
- Fixed buffer settings.

2012-07-27
- Improved some mappings.
- Setlocal nolist.

2012-07-26
- Fixed redraw problems.
- Fixed execute_command.
- Fixed for symbolic link problem.
- Fixed <Plug>(vimfiler_switch_to_home_directory) behavior.

2012-07-23
- Call s:event_bufwin_enter() when create vimfiler.

2012-07-22
- Supported above 4.0 GB.
- Improved APIs.

2012-07-15
- Improved filename sort behavior.

2012-07-06
- Fixed move behavior.

2012-07-05
- Reduced vital.

2012-07-02
- Fixed vimfiler autocmd.
- Fixed exrename error.

2012-06-30
- Deleted tail spaces.

2012-06-28
- Fixed autocmd.

2012-06-23
- Fixed file move error.

2012-06-20
- Fixed copy and move implementation.
- Fixed delete implementation.

2012-06-10
- Improved searching vimfiler behavior.

2012-06-05
- Fixed find error.

2012-06-04
- Fixed expand tree behavior in ssh source.

2012-06-01
- Added <Plug>(vimfiler_cd_input_directory) mapping.
- Fixed s:create_another_vimfiler() error.
- Fixed cd mapping error.
- Fixed choose action.

2012-05-31
- Fixed completion.

2012-05-29
- Fixed find action error.

2012-05-28
- Improved documentation.

2012-05-25
- Fixed vimfiler mapping.

2012-05-24
- Fixed autocmd bug in g:vimfiler_as_default_explorer.

2012-05-22
- Fixed debug message.
- Fixed for visualbell.

2012-05-17
- Fixed auto detection error.

2012-05-16
- Fixed g:unite_kind_openable_lcd_command error.
- Fixed grep error.

2012-05-12
- Fixed search vimfiler error.

2012-05-02
- Added -quit option.

2012-04-28
- Updated vital.

2012-04-19
- Fixed tag error.

2012-04-16
- Added FAQ section.

2012-04-10
- Fixed browse check.
- Improved sudo check.
- Fixed choose action error.

2012-03-31
- Fixed for cmdwin.
- Fixed variables initialization.

2012-03-26
- Fixed edit binary file.

2012-03-20
- Fixed expand().

2012-03-15
- Fixed expand().

2012-03-07
- Updated vital.

2012-03-06
- Fixed create vimfiler buffer behavior.

2012-03-05
- Improved version check.

2012-03-03
- Improved new file behavior.
- Improved alternate buffer.

2012-02-25
- Fixed redraw problem.

2012-02-20
- Fixed vimfiler create buffer.

2012-02-14
- Improved helper functions.

2012-02-13
- Fixed exrename.

2012-02-12
- Refactored initialize context.

2012-02-11
- Fixed check buflisted.
- Refactored is_windows.

2012-02-10
- Fixed <Plug>(vimfiler_cd_vim_current_dir).
- Added -horizontal option.
- Fixed default explorer problem.
- Fixed handler.
- Added g:vimfiler_enable_auto_cd option.

2012-02-01
- Improved g:vimfiler_detect_drives initialize timing.

2012-01-31
- Fixed search buffer name.

2012-01-26
- Fixed winfixwidth problem.

2012-01-24
- Improved vimfiler check.
- Fixed split automatically.

2012-01-23
- Fixed switch_to_other_window error.
- Improved split edit file.
- Fixed write problem.

2012-01-22
- set fileencoding.

2012-01-20
- Fixed exrename problem.
- Improved exrename behavior.

2012-01-18
- Fixed winwidth problem.

2012-01-17
- Improved documentation.
- Fixed for Windows UNC path(mattn).

2012-01-16
- Fixed vimfiler event error.
- Fixed neocomplcache depends.

2012-01-15
- Fixed documentation.
- Fixed redraw.
- Fixed parse path.
- Fixed alternate buffer.
- Improved exrename highlight.

2012-01-14
- Improved prompt.
- Fixed buffer_name bug.
- Improved switch to other window behavior.
- Improved vimfiler syntax.
- Fixed vimfiler resize problem.
- Fixed switch vimfiler.
- Changed g:vimfiler_min_filename_width behavior.
- Added <Plug>(vimfiler_toggle_maximize_window) mapping.
- Changed g:vimfiler_max_filename_width default value.
- Fixed set_current_vimfiler_bug.

2012-01-12
- Improved make_directory action.
- Improved redraw.
- Fixed expand tree problem.

2012-01-06
- Fixed write action.
- Fixed vimfiler switch.

2012-01-05
- Fixed -toggle option.

2012-01-01
- Added g:unite_kind_file_use_trashbox option.

2011-12-30
- Fixed documentation.
- Added <Plug>(vimfiler_yank_full_path) mapping.
- Added <Plug>(vimfiler_open_file_in_another_vimfiler) mapping.
- Improved redraw tree.
- Fixed restore cursor bug.
- Improved cursor position.
- Improved redraw behavior.

2011-12-29
- Improved make directory and new file actions.
- Fixed buflisted problem.
- Improved vimfiler#get_marked_files() behavior.

2011-12-27
- Changed g:vimfiler_split_action default value.
- Improved hide behavior.
- Improved redraw behavior.
- Added icon options.
- set winfixwidth.

2011-12-26
- Fixed exrename syntax error.
- Improved hide behavior.
- Added VimFilerBufferDir command.
- Fixed for :VimFilerDouble error.

2011-12-25
- Improved <Plug>(vimfiler_split_edit_file) behavior.

2011-12-24
- Split automatically.
- Improved <Plug>(vimfiler_split_edit_file) behavior.
- Fixed winwidth problem.
- Improved redraw.

2011-12-19
- Added -winminwidth option.

2011-12-18
- Improved for conceal.

2011-12-17
- Fixed cd bug in Windows.
- Fixed toggle vimfiler bug.
- Improved redraw screen.

2011-12-16
- Added VimFilerCurrentDir command.
- Fixed completion error.
- Improved display.
- Fixed cd behavior.

2011-12-15
- Fixed cd error.
- Improved parse path.

2011-12-14
- Improved datemark.
- Improved winwidth.
- Changed vimfiler interface.

2011-12-13
- Improved execute shellcmd behavior.
- Improved cd.

2011-12-12
- Improved <Plug>(vimfiler_execute_shell_command) documentation.

2011-12-08
- Added <Plug>(vimfiler_toggle_mark_current_line_up) mapping.
- Added some mappings.
- Added vimfiler#smart_cursor_map().
- Added :VimFilerClose command.

2011-12-06
- Improved create filer behavior.

2011-12-03
- Improved redraw candidates.
- Improved vimfiler/execute source.

2011-12-01
- Fixed for UNC path.
- Fixed UNC root directory.

2011-11-30
- Added <2-LeftMouse> mapping.
- Added <RightMouse> mapping.
- Improved options.
- Implemented buffer_name option.

2011-11-29
- Fixed vimfiler#set_current_vimfiler() problem.

2011-11-28
- Fixed for UNC path.
- Implemented no quit option.
- Refactored.
- Fixed toggle mark lines error.

2011-11-25
- Detect modified buffer.
- Improved substitute path separator.

2011-11-18
- Improved redraw.
- Expand tree is implemented!
- Added expand tree recursive mapping.
- Fixed clear mark lines error.

2011-11-17
- Ver.3.1 development is started.
- Improved syntax.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
